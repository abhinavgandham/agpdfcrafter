openapi: 3.1.0
info:
  title: PDF Converter API
  version: 1.0.0
  description: API for converting HTML, Markdown, and DOCX files to PDF

servers:
  - url: http://localhost:3000
  - url: http://ec2-3-25-121-26.ap-southeast-2.compute.amazonaws.com:3000

paths:
  /api/auth/login:
    post:
      summary: User login
      tags: [Authentication]
      description: Login to the application using your username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: The username to login with
                  example: "tonyStark123"
                password:
                  type: string
                  description: The password to login with
                  example: "jarvis123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username or password"

  /api/auth/logout:
    post:
      summary: User logout
      description: Logout user and invalidate token
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        401:
          description: Failed to logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /api/file/upload:
    post:
      summary: Upload file for conversion
      description: Upload a file and convert it to PDF format
      tags: [Files]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
      responses:
        200:
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File uploaded successfully"
                  jobId:
                    type: string
                    example: "job_12345"
        400:
          description: Bad request
        401:
          description: Unauthorized

  /api/file/convert:
    post:
      summary: Convert uploaded file
      description: Convert an uploaded file to PDF format
      tags: [Files]
      security:
        - bearerAuth: []
      responses:
        200:
          description: File converted successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        400:
          description: Bad request
        401:
          description: Unauthorized

  /api/file/download/{filename}:
    get:
      summary: Download converted file
      description: Download a converted PDF file
      tags: [Files]
      security:
        - bearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: The filename to download
      responses:
        200:
          description: File download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        404:
          description: File not found
        401:
          description: Unauthorized

  /api/job/getAllJobs:
    get:
      summary: Get all jobs (Admin only)
      description: Retrieve all conversion jobs across all users (admin role required)
      tags: [Jobs]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "job_12345"
                        userId:
                          type: string
                          example: "user_67890"
                        originalFilename:
                          type: string
                          example: "document.docx"
                        convertedFilename:
                          type: string
                          example: "document.pdf"
                        status:
                          type: string
                          enum: [pending, processing, completed, failed]
                          example: "completed"
                        createdAt:
                          type: string
                          format: date-time
                          example: "2024-01-15T10:30:00Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2024-01-15T10:35:00Z"
                        error:
                          type: string
                          example: "Conversion failed due to invalid file format"
        403:
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        404:
          description: No jobs found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No jobs found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching jobs"
        401:
          description: Unauthorized

  /api/user/getAllUsers:
    get:
      summary: Get all users (Admin only)
      description: Retrieve all registered users. Admin role required. Supports sorting by fields.
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [id, username, email, fullName, role]
          description: Field to sort users by (default is `id`)
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sorting order (ascending or descending, default is `asc`)
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: "tonyStark123"
                    email:
                      type: string
                      example: "admin@company.com"
                    fullName:
                      type: string
                      example: "Tony Stark"
                    role:
                      type: string
                      example: "admin"
        403:
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching users"

  /api/user/getUserById/{id}:
    get:
      summary: Get a user by their id (Admin only)
      description: Retrieve a single user by ID. Admin role required.
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve
      responses:
        200:
          description: The user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "tonyStark123"
                  email:
                    type: string
                    example: "admin@company.com"
                  fullName:
                    type: string
                    example: "Tony Stark"
                  role:
                    type: string
                    example: "admin"
        403:
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching user"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
