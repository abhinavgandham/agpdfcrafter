AWSTemplateFormatVersion: '2010-09-09'
Description: Complete infrastructure for PDF Converter application

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.small, t3.medium]
    Description: EC2 instance type

Resources:
  # S3 Bucket for PDF conversions
  PDFConversionsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "pdfconversions-abhinav-n11795611"
      Tags:
        - Key: qut-username
          Value: n11795611@qut.edu.au
        - Key: purpose
          Value: assessment 2
      LifecycleConfiguration:
        Rules:
          - Id: DeleteConversionsAfter48Hours
            Status: Enabled
            Prefix: conversions/
            ExpirationInDays: 2

  # DynamoDB Table for job tracking
  ConversionJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "n11795611-abhinavgandham-conversions"
      AttributeDefinitions:
        - AttributeName: qut-username
          AttributeType: S
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: qut-username
          KeyType: HASH
        - AttributeName: jobId
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: qut-username
          Value: n11795611@qut.edu.au
        - Key: purpose
          Value: assessment 2

  # Parameter Store Parameters
  S3DownloadExpirationParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /n11795611-abhinavgandham-cab432/app/s3-download-expiration
      Type: String
      Value: "3600"
      Description: S3 download URL expiration time in seconds

  FileUploadLimitParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /n11795611-abhinavgandham-cab432/app/file-upload-limit
      Type: String
      Value: "104857600"
      Description: Maximum file upload size in bytes (100MB)

  # Secret Names in Parameter Store
  CognitoClientSecretNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /n11795611-abhinavgandham-cab432/app/cognito-client-secret-name
      Type: String
      Value: "n11795611-cognitoSecret-assessment2"
      Description: Name of the Cognito client secret in Secrets Manager

  CognitoClientIdSecretNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /n11795611-abhinavgandham-cab432/app/cognito-client-id-secret-name
      Type: String
      Value: "n11795611-cognitoClientId-assessment2"
      Description: Name of the Cognito client ID secret in Secrets Manager

  UserPoolIdSecretNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /n11795611-abhinavgandham-cab432/app/user-pool-id-secret-name
      Type: String
      Value: "n11795611-userPoolId-assessment2"
      Description: Name of the user pool ID secret in Secrets Manager

  DynamoDBTableSecretNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /n11795611-abhinavgandham-cab432/app/dynamodb-table-secret-name
      Type: String
      Value: "n11795611-dynamoDBTableName-assessment2"
      Description: Name of the DynamoDB table secret in Secrets Manager

  S3BucketSecretNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /n11795611-abhinavgandham-cab432/app/s3-bucket-secret-name
      Type: String
      Value: "n11795611-bucketName-assessment2"
      Description: Name of the S3 bucket secret in Secrets Manager

  # Cognito Groups
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd  # Your existing User Pool ID
      GroupName: admin
      Description: Admin users group
      Precedence: 1

  NormalGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd  # Your existing User Pool ID
      GroupName: normal
      Description: Normal users group
      Precedence: 2

  # Admin Users
  AdminUser1:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd
      Username: abhiAdmin
      UserAttributes:
        - Name: email
          Value: abhinavgandham+test5@gmail.com
        - Name: name
          Value: Admin
        - Name: email_verified
          Value: 'true'
      MessageAction: SUPPRESS

  AdminUser2:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd
      Username: admin1754
      UserAttributes:
        - Name: email
          Value: abhinavgandham+test6@gmail.com
        - Name: name
          Value: Admin
        - Name: email_verified
          Value: 'true'
      MessageAction: SUPPRESS

  AdminUser3:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd
      Username: admin234
      UserAttributes:
        - Name: email
          Value: abhinavgandham+test7@gmail.com
        - Name: name
          Value: Admin
        - Name: email_verified
          Value: 'true'
      MessageAction: SUPPRESS

  # Admin User Group Memberships
  AdminUser1GroupMembership:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn: AdminUser1
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd
      Username: abhiAdmin
      GroupName: admin

  AdminUser2GroupMembership:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn: AdminUser2
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd
      Username: admin1754
      GroupName: admin

  AdminUser3GroupMembership:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn: AdminUser3
    Properties:
      UserPoolId: ap-southeast-2_8XCJUIAAd
      Username: admin234
      GroupName: admin

  # EC2 Instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0a0f4cb8a4cf6819c  # Ubuntu 22.04 LTS in ap-southeast-2
      IamInstanceProfile: CAB432-Instance-Role
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: subnet-07ea9e4f9cc9159ca
          GroupSet:
            - sg-032bd1ff8cf77dbb9
      Tags:
        - Key: qut-username
          Value: n11795611@qut.edu.au
        - Key: purpose
          Value: assessment 2
      UserData:
        Fn::Base64: |
          #!/bin/bash
          set -e
          
          # Log everything for debugging
          exec > >(tee /var/log/user-data.log) 2>&1
          echo "Starting user data script at $(date)"
          
          # Kill any existing package operations to prevent conflicts
          echo "Stopping any existing package operations..."
          pkill -f apt-get || true
          pkill -f dpkg || true
          pkill -f unattended-upgrade || true
          
          # Disable unattended-upgrades to prevent conflicts
          systemctl stop unattended-upgrades 2>/dev/null || true
          systemctl disable unattended-upgrades 2>/dev/null || true
          
          # Clean up any existing locks
          echo "Cleaning up any existing package locks..."
          rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock
          rm -f /var/cache/apt/archives/lock
          
          # Configure dpkg to handle interrupted installations
          dpkg --configure -a || true
          
          # Enhanced package manager lock handling
          echo "Checking for package manager locks..."
          
          # Function to wait for locks with timeout
          wait_for_locks() {
              local timeout=300  # 5 minutes timeout
              local count=0
              
              while [ $count -lt $timeout ]; do
                  if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
                     ! fuser /var/lib/dpkg/lock >/dev/null 2>&1; then
                      echo "Package manager is free, proceeding..."
                      return 0
                  fi
                  echo "Waiting for package manager to finish... (${count}s/${timeout}s)"
                  sleep 5
                  count=$((count + 5))
              done
              
              echo "Timeout waiting for package manager. Forcing unlock..."
              # Force remove locks as last resort
              rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock
              dpkg --configure -a || true
              return 1
          }
          
          # Wait for locks to be released
          wait_for_locks
          
          # Update and install Docker and AWS CLI with retry logic
          echo "Updating package lists..."
          for i in {1..3}; do
              if apt-get update -y; then
                  echo "Package lists updated successfully"
                  break
              else
                  echo "Package update failed, attempt $i/3"
                  if [ $i -eq 3 ]; then
                      echo "Failed to update packages after 3 attempts"
                      exit 1
                  fi
                  sleep 10
              fi
          done
          
          echo "Installing Docker and AWS CLI..."
          for i in {1..3}; do
              if apt-get install -y docker.io docker-compose awscli; then
                  echo "Docker and AWS CLI installed successfully"
                  break
              else
                  echo "Installation failed, attempt $i/3"
                  if [ $i -eq 3 ]; then
                      echo "Failed to install packages after 3 attempts"
                      exit 1
                  fi
                  # Clean up and retry
                  apt-get clean
                  sleep 10
              fi
          done
          
          echo "Starting Docker service..."
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu
          
          # Wait a bit before ECR login
          sleep 10
          
          echo "Logging into ECR..."
          # Login to ECR with retry logic
          for i in {1..3}; do
              aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 901444280953.dkr.ecr.ap-southeast-2.amazonaws.com && break || sleep 10
          done
          
          echo "Creating app directory..."
          # Create app directory
          mkdir -p /home/ubuntu/myapp
          cd /home/ubuntu/myapp
          
          echo "Creating docker-compose.yml..."
          # Create docker-compose.yml with proper YAML formatting
          cat > /home/ubuntu/myapp/docker-compose.yml << 'EOF'
          version: '3'
          services:
            app:
              image: 901444280953.dkr.ecr.ap-southeast-2.amazonaws.com/n11795611-abhinavgandham-cab432-app:latest
              ports:
                - "3000:3000"
          EOF
          
          echo "Starting Docker Compose..."
          # Run Docker Compose in detached mode
          docker-compose up -d
          
          echo "User data script completed at $(date)"

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref MyEC2Instance

  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt MyEC2Instance.PublicIp

  ApplicationURL:
    Description: URL to access the application
    Value: !Sub "http://${MyEC2Instance.PublicIp}:3000"

  S3BucketName:
    Description: S3 bucket name for PDF conversions
    Value: !Ref PDFConversionsBucket

  DynamoDBTableName:
    Description: DynamoDB table name for conversion jobs
    Value: !Ref ConversionJobsTable
  AdminGroupName:
    Description: Cognito admin group name
    Value: !Ref AdminGroup

  NormalGroupName:
    Description: Cognito normal group name
    Value: !Ref NormalGroup
